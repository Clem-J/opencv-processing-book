== Sample Case Study Page

One of the first things that's important: a case study is not necessarily the same as a tutorial.  We don't want people to slavishly follow what we've got set up.  Rather, we want to give them the background info, links to the main reading, and help guide them through a thinking process.  So, a lot of the goal of the case study is to deepen the learner's understanding and problem solving abilities. 

Each case study can be broken into major chunks called *sections*.  For example, in this case study, we have two major sections: _frame alignment_ and _frame extraction_.  Each section can be broken into *steps*.  For example, the steps in the "frame alignment section" include: 

* Convert the image to gray
* Find sobel edges in the x-dimension (i.e. vertical)
* Threshold the image
* Find contours

Each step should be relatively self-contained (although it can certainly mention previous steps), brief, and concrete.  Zed Shaw's awesome http://learncodethehardway.org/[LCodeTHW] format is a great potential model:

* http://learnpythonthehardway.org/book/ex4.html
* http://cli.learncodethehardway.org/book/ex19.html
* http://regex.learncodethehardway.org/book/ex7.html

The key elements in each step includ:

Introduction / Name of the step::
   This would be a brief writeup on the step and what you do.  It should also include an image (os series of images), animated gif, or short video ( \< 2 minutes ) on what you do in this step.  The goal is not to necessarily to tell how, but to show you what you'll be trying to do.
Before you start::
  This is reference material on background concepts.  Rather than present a boring list of topics, review material is presented as a quiz.  The reader can take the quiz and then use this as an interactive way to brush up on the main things he or she needs to understand to complete the task.  Something like Sander's http://examples.oreilly.com/0636920022473/ebook_pop_quiz/pop_quiz.html[quiz for epub for publishers], but with a bit more jQuery pizazz, would be a good start.  This section should also provide links to additional information back to the main text, the processing API site, or even the java site with the full API for opencv.  Basically, *anything* (whether in the book or published by O'Reilly not!) that the will help the reader understand what they need to know to get the job done without actually telling him or her exactly what to do.  
Suggested solution::
   This is a code that "solves" this step.  Whenever possible, we should tie this to a specific commit for that step.  That way, you can have the "final project" in one file, but each step would have it's own version of the code at that point.  We'll use a tool like http://jashkenas.github.io/docco/[Docco] to create a much more "narrative" walkthrough of the text.  In addition. each code sample will have a toolbar whose functions are still TBD.  We need to do some real experimentation here to figure out what's possible, but for now, just assume that there is some sort of command bar that will do things like allow you to copy the code or maybe save it as a gist.

Here's a sample mockup of a step:

image::images/step_wireframe.png[]





